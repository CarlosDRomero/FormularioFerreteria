
package Interfaz;


import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import modelo.*;
import javax.swing.JComboBox;
import javax.swing.JTextField;
/**
 *
 * @author LUIS
 */
public final class Diseño extends javax.swing.JFrame {
    private int fm=-1;
    ArrayList<Proveedor> proveedores;
    ArrayList<Categoria> categorias;
    ArrayList<Producto> productos;
    ProductoDAO pd;
    CategoriaDAO cd;
    ProveedorDAO prd;
    ArrayList<String> errores;
    private void mostrarErrores(){
        String s_errores = "";
        for (String error : errores){
            s_errores+=error+"\n";
        }
        
        JOptionPane.showMessageDialog(null, s_errores,"",2);
        errores.clear();
    }
    
    public Diseño() throws SQLException {
        initComponents();
        pd = new ProductoDAO();
        cd = new CategoriaDAO();
        prd= new ProveedorDAO();
       proveedores = prd.cargarProveedores();
       categorias = cd.cargarCategorias();
       errores = new ArrayList<>();
       Eliminar.setEnabled(false);
       Modificar.setEnabled(false);
       for(Proveedor p: proveedores){
            JCprovedores.addItem(p.getNombre());
        }
        for(Categoria p: categorias){
            JCcategorias.addItem(p.getDenominacion());
        }
        ActualizarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBase = new javax.swing.JPanel();
        JPanelMenu = new javax.swing.JPanel();
        Insertar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Salir = new javax.swing.JButton();
        jPanelAparicion = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Nombre = new javax.swing.JTextField();
        PrecioCompra = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        PrecioVenta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        IVA = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        JCprovedores = new javax.swing.JComboBox<>();
        JCcategorias = new javax.swing.JComboBox<>();
        Id = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Cantidad = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanelBase.setBackground(new java.awt.Color(255, 255, 255));
        jPanelBase.setLayout(null);

        JPanelMenu.setBackground(new java.awt.Color(204, 204, 255));
        JPanelMenu.setForeground(new java.awt.Color(255, 51, 51));
        JPanelMenu.setLayout(null);

        Insertar.setText("INSERTAR");
        Insertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InsertarMouseClicked(evt);
            }
        });
        Insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertarActionPerformed(evt);
            }
        });
        JPanelMenu.add(Insertar);
        Insertar.setBounds(10, 110, 240, 80);

        Eliminar.setText("ELIMINAR");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });
        JPanelMenu.add(Eliminar);
        Eliminar.setBounds(10, 290, 240, 80);

        Modificar.setText("MODIFICAR");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });
        JPanelMenu.add(Modificar);
        Modificar.setBounds(10, 198, 240, 80);

        jLabel1.setFont(new java.awt.Font("Yu Gothic Medium", 1, 24)); // NOI18N
        jLabel1.setText("    MENU");
        JPanelMenu.add(jLabel1);
        jLabel1.setBounds(70, 30, 120, 40);

        Salir.setText("SALIR");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        JPanelMenu.add(Salir);
        Salir.setBounds(10, 540, 240, 80);

        jPanelBase.add(JPanelMenu);
        JPanelMenu.setBounds(0, 0, 260, 660);

        jPanelAparicion.setBackground(new java.awt.Color(218, 220, 255));
        jPanelAparicion.setLayout(null);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel2.setText("FORMULARIO ");
        jPanelAparicion.add(jLabel2);
        jLabel2.setBounds(340, 20, 150, 50);

        Nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreActionPerformed(evt);
            }
        });
        jPanelAparicion.add(Nombre);
        Nombre.setBounds(190, 110, 90, 20);
        jPanelAparicion.add(PrecioCompra);
        PrecioCompra.setBounds(70, 180, 90, 22);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("ID");
        jPanelAparicion.add(jLabel3);
        jLabel3.setBounds(70, 90, 50, 16);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Precio compra");
        jPanelAparicion.add(jLabel4);
        jLabel4.setBounds(70, 160, 100, 16);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Categoria");
        jPanelAparicion.add(jLabel6);
        jLabel6.setBounds(480, 160, 80, 16);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Fecha Nacimiento", "Fecha Matricula"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jPanelAparicion.add(jScrollPane1);
        jScrollPane1.setBounds(30, 240, 720, 350);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Provedor");
        jPanelAparicion.add(jLabel7);
        jLabel7.setBounds(470, 90, 70, 16);

        PrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrecioVentaActionPerformed(evt);
            }
        });
        jPanelAparicion.add(PrecioVenta);
        PrecioVenta.setBounds(190, 180, 90, 22);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Precio venta");
        jPanelAparicion.add(jLabel5);
        jLabel5.setBounds(190, 160, 100, 20);
        jPanelAparicion.add(IVA);
        IVA.setBounds(310, 180, 90, 22);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("IVA");
        jPanelAparicion.add(jLabel8);
        jLabel8.setBounds(320, 160, 50, 16);

        JCprovedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCprovedoresActionPerformed(evt);
            }
        });
        jPanelAparicion.add(JCprovedores);
        JCprovedores.setBounds(520, 110, 170, 22);

        jPanelAparicion.add(JCcategorias);
        JCcategorias.setBounds(520, 180, 180, 22);

        Id.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IdMouseClicked(evt);
            }
        });
        Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdActionPerformed(evt);
            }
        });
        jPanelAparicion.add(Id);
        Id.setBounds(70, 110, 90, 22);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Cantidad");
        jPanelAparicion.add(jLabel9);
        jLabel9.setBounds(300, 90, 100, 16);

        Cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CantidadActionPerformed(evt);
            }
        });
        jPanelAparicion.add(Cantidad);
        Cantidad.setBounds(310, 110, 90, 22);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Nombre");
        jPanelAparicion.add(jLabel10);
        jLabel10.setBounds(190, 90, 100, 16);

        jPanelBase.add(jPanelAparicion);
        jPanelAparicion.setBounds(270, 0, 840, 660);

        getContentPane().add(jPanelBase);
        jPanelBase.setBounds(0, 0, 1110, 660);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InsertarMouseClicked
          
    }//GEN-LAST:event_InsertarMouseClicked

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        JOptionPane.showMessageDialog(null, "GRACIAS POR USAR EL PROGRAMA MACPATO");
        System.exit(0);
                
    }//GEN-LAST:event_SalirActionPerformed

    private void InsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertarActionPerformed

        if (!validarCampos()) {
            mostrarErrores();
            return;
        }
        String id = Id.getText();
        String nombre = Nombre.getText();
        int precioCompra = Integer.parseInt(PrecioCompra.getText());
        int precioVenta = Integer.parseInt(PrecioVenta.getText());
        int iva = Integer.parseInt(IVA.getText());
        int cantidad = Integer.parseInt(Cantidad.getText());
        Proveedor pr = proveedores.get(JCprovedores.getSelectedIndex());
        String rutProveedor = pr.getRut();
        int idCategoria = JCcategorias.getSelectedIndex() + 1;
        Producto producto = new Producto(id, nombre, precioCompra, precioVenta, iva, cantidad, rutProveedor, idCategoria);
         try {
             if(pd.InsertarProducto(producto)){
               limpiar();
               ActualizarDatos();
             }
         } catch (SQLIntegrityConstraintViolationException ex) {
             errores.add("Esta id ya esta registrada,\npuede utilizar el boton modificar si desea actualizar el registro." );
             mostrarErrores();
         }catch(SQLException ex){
             Logger.getLogger(Diseño.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_InsertarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed

        if(fm==-1){
            errores.add("Seleccione una fila para eliminar");
        mostrarErrores();
        return;
        }
        try {
            pd.eliminarProducto(productos.get(fm));
            ActualizarDatos();
            fm = -1;
            limpiar();
        } catch (SQLException ex) {
            Logger.getLogger(Diseño.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EliminarActionPerformed

    private void NombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreActionPerformed

    private void PrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrecioVentaActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        if(!validarCampos()){
            
            if(fm==-1){
                errores.clear();
                errores.add("Seleccione una fila para modificar");
            }
            mostrarErrores();
            return;
         }
      

        Producto p = productos.get(fm);
        p.setNombre(Nombre.getText());
        p.setPrecio_compra(Integer.parseInt(PrecioCompra.getText()));
        p.setPrecio_venta(Integer.parseInt(PrecioVenta.getText()));
        p.setIVA(Integer.parseInt(IVA.getText()));
        p.setCantidad(Integer.parseInt(Cantidad.getText()));
        Proveedor pr = proveedores.get(JCprovedores.getSelectedIndex()) ;
        p.setRutProveedor(pr.getRut());
        p.setId_categoria(JCcategorias.getSelectedIndex()+1);
       
        try {
            if(pd.modificarProducto(p)){
                ActualizarDatos();
                fm=-1;
            }
        } catch (SQLException e) {
        }
       
    }//GEN-LAST:event_ModificarActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        Id.setEnabled(false);
        fm= Tabla.getSelectedRow();
        
    Producto p = productos.get(fm);
    Id.setText(p.getId());
    Nombre.setText(p.getNombre());
    PrecioCompra.setText(String.valueOf(p.getPrecio_compra()));
    PrecioVenta.setText(String.valueOf(p.getPrecio_venta()));
    IVA.setText(String.valueOf(p.getIVA()));
    Cantidad.setText(String.valueOf(p.getCantidad()));
    int indice_prov= proveedores.stream() .map(Proveedor::getRut) .collect(java.util.stream.Collectors.toList()) .indexOf(p.getRutProveedor());;
    JCcategorias.setSelectedIndex(p.getId_categoria()-1);
    JCprovedores.setSelectedIndex(indice_prov);
    Eliminar.setEnabled(true);
    Modificar.setEnabled(true);
    Insertar.setEnabled(false);
    }//GEN-LAST:event_TablaMouseClicked

    private void JCprovedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCprovedoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCprovedoresActionPerformed

    private void IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdActionPerformed
        
        
    }//GEN-LAST:event_IdActionPerformed

    private void CantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CantidadActionPerformed

    private void IdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IdMouseClicked
        Eliminar.setEnabled(false);
        Modificar.setEnabled(false);
        Insertar.setEnabled(true);
        limpiar();
        Id.setEnabled(true);
        Id.requestFocus();
        fm=-1;
    }//GEN-LAST:event_IdMouseClicked

    public String combobox(JComboBox combobox){
    Object selectedItem = combobox.getSelectedItem();
    if (selectedItem != null) {
    String selectedValue = selectedItem.toString();
    System.out.println("Valor seleccionado: " + selectedValue);
    return selectedValue;
    } else {
    System.out.println("Ningún elemento seleccionado");}
        return null;

    }
    
    public void limpiar(){
    Id.setText("");
    Nombre.setText("");
    PrecioVenta.setText("");
    PrecioCompra.setText("");
    IVA.setText("");
    Cantidad.setText("");
    }
//  import javax.swing.JTextField;


    public boolean validarCampos() {
        int iva, precioCompra, precioVenta, cantidad;

        validarCampoNoVacio(Nombre, "- El campo 'Nombre' no puede estar vacío");
        validarCampoTextoValido(Nombre, "- Ingrese un nombre válido (no puede empezar por números ni contener caracteres especiales)");

        validarID(Id, "- La ID debe contener exactamente 12 dígitos numéricos");
        boolean vIVA = validarCampoNumerico(IVA, "- Introduzca un valor numérico para el IVA");
        boolean vPC = validarCampoNumerico(PrecioCompra, "- Introduzca un valor numérico para el precio de compra");
        boolean vPV = validarCampoNumerico(PrecioVenta, "- Introduzca un valor numérico para el precio de venta");
        boolean vCantidad = validarCampoNumerico(Cantidad, "- Introduzca un valor numérico para la cantidad");

        boolean errorNegativos = false;

        if (vPC && vPV) {
            precioCompra = obtenerEnteroDesdeCampo(PrecioCompra);
            precioVenta = obtenerEnteroDesdeCampo(PrecioVenta);

            if (precioCompra <= 0 || precioVenta <= 0) {
                errores.add("- No coloque números negativos");
                errorNegativos = true;
            } else if (precioCompra >= precioVenta) {
                errores.add("- El precio de venta debe ser mayor que el precio de compra");
            }
        }

        if (vIVA && vCantidad) {
            iva = obtenerEnteroDesdeCampo(IVA);
            cantidad = obtenerEnteroDesdeCampo(Cantidad);

            if (iva < 0 || cantidad < 0 && ! errorNegativos) {
                errores.add("- No coloque números negativos");
            }
        }

        return errores.isEmpty();

}

    private void validarID(JTextField campo, String mensajeError) {
        String valor = campo.getText();
        if (!valor.matches("\\d{12}")) {
            errores.add(mensajeError);
        }
    }    

    private void validarCampoNoVacio(JTextField campo, String mensajeError) {
        if (campo.getText().isEmpty()) {
            errores.add(mensajeError);
        }
    }

    private void validarCampoTextoValido(JTextField campo, String mensajeError) {
        String valor = campo.getText();
        if (!valor.matches("^[a-zA-ZñÑáéíóúÁÉÍÓÚ\\s][a-zA-Z0-9/ñÑáéíóúÁÉÍÓÚ\\s]*$")) {
            errores.add(mensajeError);
        }
    }

    private boolean validarCampoNumerico(JTextField campo, String mensajeError) {
        String valor = campo.getText();
        try {
            Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            errores.add(mensajeError);
            return false;
        }
    }

    private int obtenerEnteroDesdeCampo(JTextField campo) {
        String valor = campo.getText();
        return Integer.parseInt(valor);
    }



     public void MandardDatosTabla(ArrayList<String[]>filas) {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID");
    model.addColumn("Nombre");
    model.addColumn("Precio compra");
    model.addColumn("Precio Venta");
    model.addColumn("iva");
    model.addColumn("Cantidad");
    model.addColumn("Proveedor");
    model.addColumn("rut");
    model.addColumn("Categoria");
    Tabla.setModel(model);
         for (String[] fila : filas) {
             model.addRow(fila);
         }

}
     public void ActualizarDatos() throws SQLException{
    productos = pd.obtenerProductos();
    MandardDatosTabla(pd.obtenerDatosTabla());

}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Cantidad;
    private javax.swing.JButton Eliminar;
    private javax.swing.JTextField IVA;
    private javax.swing.JTextField Id;
    private javax.swing.JButton Insertar;
    public static javax.swing.JComboBox<String> JCcategorias;
    public static javax.swing.JComboBox<String> JCprovedores;
    private javax.swing.JPanel JPanelMenu;
    private javax.swing.JButton Modificar;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField PrecioCompra;
    private javax.swing.JTextField PrecioVenta;
    private javax.swing.JButton Salir;
    public static javax.swing.JTable Tabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelAparicion;
    private javax.swing.JPanel jPanelBase;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
